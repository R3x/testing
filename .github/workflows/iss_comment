# name: Add Reviewers

# on:
#   pull_request:
#     types: [opened]
#   issue_comment:
#     types: [created]

# jobs:
#   fetch_reviewers:
#     runs-on: ubuntu-latest
#     outputs:
#       reviewers: ${{ steps.check.outputs.comment_body }}
#     steps:
#       - uses: khan/pull-request-comment-trigger@master
#         id: check
#         with:
#           trigger: '/r'
#           prefix_only: true
#         env:
#           GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
#       - run: 'echo Found it! ${{steps.check.outputs.comment_body}}'
#         if: steps.check.outputs.comment_body
#       - uses: actions/checkout@v2
#       - name: Setup upterm session
#         uses: lhotari/action-upterm@v1

#   assign_reviewers:
#     runs-on: ubuntu-latest
#     needs: fetch_reviewers
#     steps:
#     - name: Add Reviewers
#       uses: madrapps/add-reviewers@v1
#       with:
#         token: ${{ secrets.GITHUB_TOKEN }}
#         reviewers: ${{needs.fetch_reviewers.outputs.reviewers}}
#         re-request-when-approved: true
#         re-request-when-changes-requested: true
#     - run: echo $token

# name: send-pr

# on:
#   pull_request:
#     types: [ opened ]
#   issue_comment:
#     types: [ created ]

# jobs:
#   send-pr:
#     runs-on: ubuntu-20.04
#     steps:
#     - uses: khan/pull-request-comment-trigger@master
#       id: check
#       with:
#         trigger: "/send"
#         reaction: rocket
#       env:
#         GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
#     - run: 'echo Found it! ${{steps.check.outputs.comment_body}}'
#       if: steps.check.outputs.triggered == 'true'

#     - name: Setup git
#       if: steps.check.outputs.triggered == 'true'
#       run: |
#         git config --global user.email "${{ secrets.GIT_EMAIL }}"
#         git config --global user.name "${{ secrets.GIT_NAME }}"
#         git config --global sendemail.smtpuser "${{ secrets.SMTP_USER }}"
#         git config --global sendemail.smtpserver "${{ secrets.SMTP_SERVER }}"
#         git config --global sendemail.smtppass "${{ secrets.SMTP_PASS }}"
#         git config --global init.defaultBranch main

#     - name: Install git prereq
#       if: steps.check.outputs.triggered == 'true'
#       run: |
#         sudo add-apt-repository ppa:git-core/ppa
#         sudo apt update
#         sudo apt-cache search git-send-email
#         sudo apt-cache search git-email
#         sudo apt install git-email

#     - name: Fetch git-pile
#       if: steps.check.outputs.triggered == 'true'
#       uses: actions/checkout@v2
#       with:
#         repository: git-pile/git-pile
#         path: git-pile
#         ref: next

#     - name: Install git-pile
#       if: steps.check.outputs.triggered == 'true'
#       uses: git-pile/automation/env-setup@main
#       with:
#         version: ./git-pile

#     - name: Checkout detached pile branch
#       if: steps.check.outputs.triggered == 'true'
#       uses: actions/checkout@v2
#       with:
#         ref:  refs/pull/${{ github.event.issue.number }}/head
#         fetch-depth: 2

#     - name: Name branches
#       if: steps.check.outputs.triggered == 'true'
#       run: |
#         git branch pile-head HEAD
#         git branch pile-base HEAD^

#     - name: Create base branch
#       if: steps.check.outputs.triggered == 'true'
#       uses: git-pile/automation/setup@main
#       with:
#         pile-branch-name: pile
#         pile-branch-ref: pile-base
#         result-branch-name: base
#         fetch-baseline: true

#     - run: git log --oneline

#     - name: Create result branch
#       if: steps.check.outputs.triggered == 'true'
#       uses: git-pile/automation/setup@main
#       with:
#         pile-branch-name: pile
#         pile-branch-ref: pile-head
#         result-branch-name: internal
#         fetch-baseline: true

#     - name: Create patches
#       if: steps.check.outputs.triggered == 'true'
#       run: |
#         git -C patches reset --hard pile-base
#         ( echo "${{ github.event.issue.title }}"; echo "${{ github.event.issue.body }}" ) | \
#                 git pile format-patch --local -o .tmp/ -F - base...internal

#     - name: send patches
#       if: steps.check.outputs.triggered == 'true'
#       run: |
#         echo -e  "Subject: test email\n\ntest" > test.mbx
#         git send-email --to lucas.de.marchi@gmail.com .tmp/*



name: pull request comment github actions

on:
  issue_comment:
    types: [created, edited]

jobs:
  check_comment:
    name: Judge release comment
    runs-on: ubuntu-latest
    env:
      BUMPUP: fromJSON('["major", "minor", "patch"]')

    steps:
      - name: check comment
        uses: xt0rted/slash-command-action@065da288bcfe24ff96b3364c7aac1f6dca0fb027 #1.1.0
        id: command
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          command: release
          reaction: true
          reaction-type: eyes
          allow-edits: false
          permission-level: write
      - name: Git settings
        run: |
          git config --global user.name release-machine
          git config --global user.email email@example.com
      - name: release request
        if: contains(${BUMPUP}, ${{steps.command.outputs.command-arguments}})
        uses: xt0rted/slash-command-action@065da288bcfe24ff96b3364c7aac1f6dca0fb027 #1.1.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          command: release
          reaction: true
          reaction-type: rocket
          allow-edits: false
          permission-level: write

      - name: get brach name
        if: contains(${BUMPUP}, ${{steps.command.outputs.command-arguments}})
        uses: xt0rted/pull-request-comment-branch@f2f07162618551540507cbd00ddf16ffcaa0c72f #1.3.0
        id: comment-branch

      - name: checkout
        uses: actions/checkout@v2
        if: contains(${BUMPUP}, ${{steps.command.outputs.command-arguments}})
        with:
          ref: ${{ steps.comment-branch.outputs.head_ref }}

      - name: post release comment
        if: contains(${BUMPUP}, ${{steps.command.outputs.command-arguments}})
        uses: actions/github-script@v5
        env:
          MESSAGE: ${{ steps.command.outputs.command-arguments }} にてリリースを行います。
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: process.env.MESSAGE
            })

      - name: release commit
        if: contains(${BUMPUP}, ${{steps.command.outputs.command-arguments}})
        run: |
          git commit --allow-empty -m "bump up version ${{ steps.command.outputs.command-arguments }}"
          git push
